package de.enviam.eiswelt.manager.scrolling {
	import de.enviam.eiswelt.utils.HOScale9Object;

	import flash.display.BitmapData;
	import flash.display.InteractiveObject;
	import flash.display.Stage;
	import flash.events.Event;
	import flash.events.MouseEvent;
	import flash.geom.Rectangle;
	import flash.text.TextField;
	/**
	 * @author Stefan von der Krone (2011)
	 */
	public class ScrollerManager extends Object {

		private static const DRAGGER_SCALEGRID : Rectangle = new Rectangle( 6, 14, 6, 135 );
		private var _scroller : ScrollerView;
		private var _scrollable : InteractiveObject;
		private var _scrollRect : Rectangle;
		private var _currentPosition : Number;
		private var _targetPosition : Number;
		private var _deltaPosition : Number;
		private var _maxRectY : Number;
		private var _maxScrollerY : Number;
		private var _dragsScrollable : Boolean = false;
		private var _dragsScroller : Boolean = false;
		private var _stageY : Number;
		private var _draggerScale9 : HOScale9Object;

		public function ScrollerManager() {
		}

		public function init( scrollable : InteractiveObject, scrollRect : Rectangle, scroller : ScrollerView ) : void {
			_scroller = scroller;
			_scrollable = scrollable;
			_scrollRect = scrollRect;
			replaceDragger();
			if ( _scroller.scaleY > 1 ) {
				_scroller._bg.height = _scroller.height;
				_scroller.scaleY = 1;
			}
			_draggerScale9.height = Math.round( _scroller._bg.height * _scrollRect.height / _scrollable.height );
			_maxScrollerY = _scroller._bg.height - _draggerScale9.height;
			_scrollable.scrollRect = _scrollRect;
			_scrollable.cacheAsBitmap = true;
			_currentPosition = 0;
			_targetPosition = 0;
			_maxRectY = _scrollable.height - _scrollRect.height;
			if ( _maxRectY > 0 )
				_deltaPosition = _scrollable is TextField ? ( 1 / 3 ) / ( _scrollable.height / TextField( _scrollable ).numLines * _maxRectY / _scrollable.height ) : 10 / _maxRectY;
			else _scroller.visible = false;
		}

		private function replaceDragger() : void {
			var data : BitmapData = new BitmapData(_scroller._dragger.width, _scroller._dragger.height, true, 0x00000000);
			data.draw(_scroller._dragger, null, null, null, null, true);
			_draggerScale9 = new HOScale9Object( data, DRAGGER_SCALEGRID );
			_scroller.addChild( _draggerScale9 );
			if (_scroller._dragger) {
				_scroller._dragger.visible = false;
				// _scroller.removeChild( _scroller._dragger );
			}
		}

		public function start() : void {
			if ( _scroller.visible )
				addListeners();
			_scrollable.addEventListener( Event.SCROLL, scrollHandler );
		}

		private function addListeners() : void {
			_scrollable.addEventListener( Event.ENTER_FRAME, enterframeHandler );
			_scrollable.addEventListener( MouseEvent.MOUSE_WHEEL, mouseWheelHandler );
			_scrollable.addEventListener( MouseEvent.MOUSE_DOWN, mouseDownHandler );
			_draggerScale9.addEventListener( MouseEvent.MOUSE_DOWN, mouseDownHandler );
			_scroller._bg.addEventListener( MouseEvent.CLICK, clickHandler );
			_scroller.addEventListener( MouseEvent.MOUSE_WHEEL, mouseWheelHandler );
			_draggerScale9.useHandCursor = true;
			_draggerScale9.buttonMode = true;
			_draggerScale9.mouseChildren = false;
		}

		private function removeListeners() : void {
			_scrollable.removeEventListener( Event.ENTER_FRAME, enterframeHandler );
			_scrollable.removeEventListener( MouseEvent.MOUSE_WHEEL, mouseWheelHandler );
			_scrollable.removeEventListener( MouseEvent.MOUSE_DOWN, mouseDownHandler );
			_draggerScale9.removeEventListener( MouseEvent.MOUSE_DOWN, mouseDownHandler );
			_scroller._bg.removeEventListener( MouseEvent.CLICK, clickHandler );
			_scroller.removeEventListener( MouseEvent.MOUSE_WHEEL, mouseWheelHandler );
			_draggerScale9.useHandCursor = false;
			_draggerScale9.buttonMode = false;
			_draggerScale9.mouseChildren = true;
			const stage : Stage = _scrollable.stage ? _scrollable.stage : _scroller.stage;
			if ( stage ) {
				stage.removeEventListener( MouseEvent.MOUSE_UP, mouseUpHandler );
				stage.removeEventListener( MouseEvent.MOUSE_MOVE, mouseMoveHandler );
			}
		}

		private function clickHandler( evt : MouseEvent ) : void {
			if ( evt.target == _scroller._bg )
				_targetPosition = Math.max( 0, Math.min( 1, _scroller._bg.mouseY / 100 ) );
		}

		private function scrollHandler( evt : Event ) : void {
			if ( _scrollable is TextField ) {
				TextField( _scrollable ).scrollH = 0;
				TextField( _scrollable ).scrollV = 1;
			}
		}

		private function mouseDownHandler( evt : MouseEvent ) : void {
			const stage : Stage = _scrollable.stage ? _scrollable.stage : _scroller.stage;
			if ( stage ) {
				stage.addEventListener( MouseEvent.MOUSE_UP, mouseUpHandler );
				stage.addEventListener( MouseEvent.MOUSE_MOVE, mouseMoveHandler );
				if ( evt.target == _scrollable ) _dragsScrollable = true;
				else _dragsScroller = true;
				_stageY = stage.mouseY;
			}
		}

		private function mouseMoveHandler( evt : MouseEvent ) : void {
			const stage : Stage = _scrollable.stage ? _scrollable.stage : _scroller.stage;
			if ( _dragsScrollable ) {
				_scrollRect.y = Math.max( 0, Math.min( _maxRectY, _scrollRect.y + ( _stageY - stage.mouseY ) ) );
				_targetPosition = _currentPosition = _scrollRect.y / _maxRectY;
				_draggerScale9.y = Math.round( _maxScrollerY * _currentPosition );
				_scrollable.scrollRect = _scrollRect;
			} else {
				_draggerScale9.y = Math.max( 0, Math.min( _maxScrollerY, _draggerScale9.y - ( _stageY - stage.mouseY ) ) );
				_targetPosition = _draggerScale9.y / _maxScrollerY;
			}
			_stageY = stage.mouseY;
		}

		private function mouseUpHandler( evt : MouseEvent ) : void {
			var stage : Stage = Stage( evt.currentTarget );
			stage.removeEventListener( MouseEvent.MOUSE_UP, mouseUpHandler );
			stage.removeEventListener( MouseEvent.MOUSE_MOVE, mouseMoveHandler );
			_dragsScrollable = false;
			_dragsScroller = false;
		}

		private function mouseWheelHandler( evt : MouseEvent ) : void {
			if ( _dragsScrollable || _dragsScroller ) return;
			_targetPosition = Math.max( 0, Math.min( 1, _targetPosition - evt.delta * _deltaPosition ) );
		}

		private function enterframeHandler( evt : Event ) : void {
			if ( _dragsScrollable ) return;
			_currentPosition = _currentPosition + ( _targetPosition - _currentPosition ) / 4;
			_scrollRect.y = Math.round( _maxRectY * _currentPosition );
			_scrollable.scrollRect = _scrollRect;
			if ( !_dragsScroller )
				_draggerScale9.y = Math.round( _maxScrollerY * _targetPosition );
		}

		public function freeze() : void {
			removeListeners();
			_scrollable.removeEventListener( Event.SCROLL, scrollHandler );
		}

		public function reset() : void {
			removeListeners();
			_scrollable.removeEventListener( Event.SCROLL, scrollHandler );
			_scrollRect.x = 0;
			_scrollRect.y = 0;
			_scrollable.scrollRect = _scrollRect;
			_targetPosition = 0;
			_currentPosition = 0;
			_draggerScale9.y = 0;
		}

		public function dispose() : void {
			removeListeners();
			_scroller.removeChild(_draggerScale9);
			_draggerScale9 = null;			
			_scrollable.scrollRect = null;
			_scrollable.removeEventListener( Event.SCROLL, scrollHandler );
			_scroller.visible = true;
			_scrollable = null;
			_scroller = null;
			_scrollRect = null;
		}
	}
}
